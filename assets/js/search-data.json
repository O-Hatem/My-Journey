{
  
    
        "post0": {
            "title": "Garbage Collection in Python",
            "content": "import datatable as dt import pandas as pd . data = dt.fread(&#39;car-sales.csv&#39;).to_pandas() data.head() . Make Colour Odometer (KM) Doors Price . 0 Toyota | White | 150043 | 4 | $4,000.00 | . 1 Honda | Red | 87899 | 4 | $5,000.00 | . 2 Toyota | Blue | 32549 | 3 | $7,000.00 | . 3 BMW | Black | 11179 | 5 | $22,000.00 | . 4 Nissan | White | 213095 | 4 | $3,500.00 | . data_2 = data . print(&quot;data id&quot;, id(data)) print(&quot;data_2 id&quot;, id(data_2)) . data id 139997003741120 data_2 id 139997003741120 . it&#39;s the same address, so changing in one means change in the other . data[&#39;test_1&#39;] = &#39;test_1&#39; . display(data.head(1)) display(data_2.head(1)) . Make Colour Odometer (KM) Doors Price . 0 Toyota | White | 150043 | 4 | $4,000.00 | . Make Colour Odometer (KM) Doors Price test_2 . 0 Toyota | White | 150043 | 4 | $4,000.00 | test_2 | . but using the copy() method it creates a variable with a different address . data_3 = data.copy() data_3.head(1) . Make Colour Odometer (KM) Doors Price test_1 . 0 Toyota | White | 150043 | 4 | $4,000.00 | test_1 | . print(&quot;data id&quot;, id(data)) print(&quot;data_2 id&quot;, id(data_2)) print(&quot;data_3 id&quot;, id(data_3)) . data id 139997003741120 data_2 id 139997003741120 data_3 id 139995637919856 . data_2[&quot;test_2&quot;] = &quot;test_2&quot; . display(data.head(1)) display(data_2.head(1)) . Make Colour Odometer (KM) Doors Price test_1 test_2 . 0 Toyota | White | 150043 | 4 | $4,000.00 | test_1 | test_2 | . Make Colour Odometer (KM) Doors Price test_1 test_2 . 0 Toyota | White | 150043 | 4 | $4,000.00 | test_1 | test_2 | . Changing a table inplace means it doesn&#39;t change its address. It works with the same allocated memory . data.drop(&#39;test_1&#39;, axis=1, inplace=True) . display(data.head(1)) display(data_2.head(1)) . Make Colour Odometer (KM) Doors Price test_2 . 0 Toyota | White | 150043 | 4 | $4,000.00 | test_2 | . Make Colour Odometer (KM) Doors Price test_2 . 0 Toyota | White | 150043 | 4 | $4,000.00 | test_2 | . But assigning it to a new variable means a new memory slot needs to be allocated . data = data.drop(&#39;test_2&#39;, axis=1) . display(data.head(1)) display(data_2.head(1)) . Make Colour Odometer (KM) Doors Price . 0 Toyota | White | 150043 | 4 | $4,000.00 | . Make Colour Odometer (KM) Doors Price test_2 . 0 Toyota | White | 150043 | 4 | $4,000.00 | test_2 | . What if we split the data does it change the address? . X = data.drop(&#39;Price&#39;, axis=1) y = data[&#39;Price&#39;] . print(&quot;X id&quot;, id(X)) print(&quot;y id&quot;, id(y)) print(&quot;data id&quot;, id(data)) . X id 139995637485824 y id 139995637488032 data id 139995637486688 . Trying it with simple variables . a = 1 b = a c = a + 1 print(&quot;a id&quot;, id(a)) print(&quot;b id&quot;, id(b)) print(&quot;c id&quot;, id(c)) a = a+1 print() print(&quot;a id&quot;, id(a)) print(&quot;b id&quot;, id(b)) print(&quot;c id&quot;, id(c)) . a id 139997058959664 b id 139997058959664 c id 139997058959696 a id 139997058959696 b id 139997058959664 c id 139997058959696 . a = 1 b = a c = a + 1 print(&quot;a id&quot;, id(a)) print(&quot;b id&quot;, id(b)) print(&quot;c id&quot;, id(c)) a = b+1 print() print(&quot;a id&quot;, id(a)) print(&quot;b id&quot;, id(b)) print(&quot;c id&quot;, id(c)) . a id 139997058959664 b id 139997058959664 c id 139997058959696 a id 139997058959696 b id 139997058959664 c id 139997058959696 . so any thing in the the rhs will evaluate as a new variable, therefore new memory address . Just noticed that increasing the value of a by 1 (now it&#39;s 2, the same as c) will make the address of a and c the same. . Does that mean Python will create one memory slot for a specific value and any variable with that value will get the same address? . d = 2 print(&quot;d id&quot;, id(d)) . d id 139997058959696 . it looks like it. i&#39;m impressed ngl . i read a little into an article about python garbage collection. . What i got is, yes, it allocate only one memory slot for the object and in the underlying layers it got something called reference count, where it keeps count of all objects uses this memory slot and when the count is equal to 0 it deallocate it immediatly. . import sys sys.getrefcount(2) e = 2 sys.getrefcount(2) del e sys.getrefcount(2) . 1928 . 1929 . 1928 . from this article . After using this type of statement, the objects are no longer accessible for the given code. But, the objects are still there in the memory. . so we use gc.collect() after it to free the memory. . import gc . a = 19 del a gc.collect() . 0 .",
            "url": "https://o-hatem.github.io/My-Journey-/2021/10/29/Garbage-collection-in-Python.html",
            "relUrl": "/2021/10/29/Garbage-collection-in-Python.html",
            "date": " • Oct 29, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Stuff to Learn",
            "content": "Python Library . datatable. a python library that help loads files into notebooks faster than doing it normally with pd.read_csv(). This a link to sets, each represent a topic on the library. . | gc. Python’s garbage collector module. . | category_encoders. More specific a coder named TargetEncoder . | Useful Concepts . Memory Reduction. For large datasets, Memor reduction is very useful in saving processing time. Found in this notebook . | Using manual cross validation functions. . | Machine Learning Algorithms . XGBoost. |",
            "url": "https://o-hatem.github.io/My-Journey-/markdown/2021/10/27/NewStuffToLearn.html",
            "relUrl": "/markdown/2021/10/27/NewStuffToLearn.html",
            "date": " • Oct 27, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "My Roadmap for Becoming a Data Scientist",
            "content": "RoadMap . Data Science and Machine Learning Udemy course. (finished in about 3 months) . Just today (Oct 25th, 2021), i almost the couse. It was very since and taught me how to write code for machine learning models with a small transefer learning model in the end. I learned how to : . Preprocess Data (Cleaning, Imputing, etc) | Use Numpy, Pandas for accessing and manipulating data in dataframes | Use Matplotlib to visualize data and figure out how my model is performing | Write an end-to-end machine learning models for regression and classification problems. | Use TensorFlow and TensorFlow Hub with Keras to build a transefer learning model | . but the course lackes the theortical part of machine learning and deep learning which is what i am looking to do next. . | Mathematics for Machine Leaning Coursea course . | What i’m looking to do next . Andrew Ng Youtube playlist . Data Science from Scratch Book from O’reilly . Notes . I should not stop doing Kaggle comeptitions and should be coming up with my own ideas while taking a therotical course. I’ll feel discouraged to compelete the course if all i see is the math and equations. And to not forget the practical part. | . Storytelling . (Oct 27th, 2021) After a little bit of thinking i decided to start with Andrew Ng’s Machine Learning Playlist on YouTube. But before that, i’d like to review all the math needed to complete the course which include: Linear Algebra | Multi-variable calculas | Probability and Statistics | . The Mathematics for Machine Learning Coursera course covers the first two points plus PCA (principal component analysis). so after finishing it, i’ll search for a convinent course for probability and statistics for machine learning. . | . Deadlines . Finish the ZTM:Data Science and Machine Learning course Start on: (idk exactly but around June) | Deadline on: Nov 25th, 2021 | Oct 25th, 2021 (one month early) | . | Mathematics for Machine Learning: Linear Algebra (~18h course) Start on: Oct 27th, 2021 | Deadline on: Nov 27th, 2021 | Finished on: TBC | . | .",
            "url": "https://o-hatem.github.io/My-Journey-/markdown/2021/10/25/RoadMap.html",
            "relUrl": "/markdown/2021/10/25/RoadMap.html",
            "date": " • Oct 25, 2021"
        }
        
    
  
    
        ,"post3": {
            "title": "ML Questions",
            "content": "ML-related Questions . What is Cross Validation and what is it used for? . Cross Validation is a statstical way to predict the accuracy of a machine learning model. It helps reduce the change of overfitting to the data and selection bias. it’s used specially with small datasets where each data point may carry an important piece of information to help the machine learning model better predict. . Types of Cross Validation: . Classification has two main broad types: . non-Exhasutive Methods. non-Exhaustive method doesn’t compute all the ways of splitting data. . Holdout method. this method word by dividing the data into two sets, training and testing sets. Usually the percentage is 80:20 or 75:25 for training and testing respcetivly. . | K fold cross validation. it’s an improvment to the holdout method. it works by dividing the data into k folds, where training is performed on k-1 folds and testing is performed on 1 fold. then it chooses a different fold for testing while the rest for training, and so for till all folds are used as a testing fold once. Finally, it takes the average of all combination. . | Stratified K fold cross validation. There maybe a problem when using k fold CV when working on a classifcation problem. Where one fold can have a majority of a class resulting in selection bias for a particular fold. to prevent that stratified k CV is used to ensure that every fold consists balanced data between the class to avoid any bias in the data. . | | Exhaustive Methods. these are methods where is split the data into every possible combination of training and test sets. . Leave-P-out Method. it works by having p data points as the test set and (n-p) as the training set. where p will be every combination of the data points in the original dataset. The higher the p, the more combinations there are, the more processing power needed. . | Leave-one-out method. it is a variance of the Leave-p-out method where p is equal to 1. it is much less exhaustive where the number of combinations is euqal to n. . | | Rolling Cross validation. Rolling cross validation is used for time series datasets. It makes sure the golden rule of time series probelms (“look at the past to predict the future”) is not broken. it divides the data by a time frame and then train each split sequentially. e.g. . | Training set: [1], test set: [2] Training set: [1, 2], test set: [3] Training set: [1, 2, 3], test set: [4] . . Training set: [1, 2, 3, ..., n-1], test set: [n] .",
            "url": "https://o-hatem.github.io/My-Journey-/markdown/2021/10/25/MLQuestions.html",
            "relUrl": "/markdown/2021/10/25/MLQuestions.html",
            "date": " • Oct 25, 2021"
        }
        
    
  
    
        ,"post4": {
            "title": "Good Reading Articles",
            "content": "Good Reading Articles . Advice for Better Blog Posts By Rachel Thomas It’s a great article for begginers on how and why to start blogging. I liked how her words makes me feel encourged to do so. There are some great tips that i found very helpful. There are some points that i feel the need to keep in my mind all the time while blogging and i’ll do my best to do so. . | How to Learn Mathematics For Machine Learning? What Concepts do You Need to Master in Data Science? A really good article on all the math a data science or machine learning learner will need. It covers the required math branches you’ll need to study as well as the most important topics in each of them. And at the end, it got some good reccomendation for resources to learn the necessary math. . | .",
            "url": "https://o-hatem.github.io/My-Journey-/markdown/2021/10/25/GoodReading.html",
            "relUrl": "/markdown/2021/10/25/GoodReading.html",
            "date": " • Oct 25, 2021"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://o-hatem.github.io/My-Journey-/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://o-hatem.github.io/My-Journey-/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}