{
  
    
        "post0": {
            "title": "Newstufftolearn",
            "content": "Things I Need To Learn and Practice . Python Library . datatable. a python library that help loads files into notebooks faster than doing it normally with pd.read_csv(). This a link to sets, each represent a topic on the library. . | gc. Python’s garbage collector module. . | category_encoders. More specific a coder named TargetEncoder . | Useful Concepts . Memory Reduction. For large datasets, Memor reduction is very useful in saving processing time. Found in this notebook . | Using manual cross validation functions. . | Machine Learning Algorithms . XGBoost. |",
            "url": "https://o-hatem.github.io/My-Journey-/2021/10/27/NewStuffToLearn.html",
            "relUrl": "/2021/10/27/NewStuffToLearn.html",
            "date": " • Oct 27, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Roadmap",
            "content": "My RoadMap for Becoming a Data Scientist . Data Science and Machine Learning Udemy course. (finished in about 3 months) . Just today (Oct 25th, 2021), i almost the couse. It was very since and taught me how to write code for machine learning models with a small transefer learning model in the end. I learned how to : . Preprocess Data (Cleaning, Imputing, etc) | Use Numpy, Pandas for accessing and manipulating data in dataframes | Use Matplotlib to visualize data and figure out how my model is performing | Write an end-to-end machine learning models for regression and classification problems. | Use TensorFlow and TensorFlow Hub with Keras to build a transefer learning model | . but the course lackes the theortical part of machine learning and deep learning which is what i am looking to do next. . | Mathematics for Machine Leaning Coursea course . | What i’m looking to do next . Andrew Ng Youtube playlist . Data Science from Scratch Book from O’reilly . Notes . I should not stop doing Kaggle comeptitions and should be coming up with my own ideas while taking a therotical course. I’ll feel discouraged to compelete the course if all i see is the math and equations. And to not forget the practical part. | . Storytelling . (Oct 27th, 2021) After a little bit of thinking i decided to start with Andrew Ng’s Machine Learning Playlist on YouTube. But before that, i’d like to review all the math needed to complete the course which include: Linear Algebra | Multi-variable calculas | Probability and Statistics | . The Mathematics for Machine Learning Coursera course covers the first two points plus PCA (principal component analysis). so after finishing it, i’ll search for a convinent course for probability and statistics for machine learning. . | . Deadlines . Finish the ZTM:Data Science and Machine Learning course Start on: (idk exactly but around June) | Deadline on: Nov 25th, 2021 | Oct 25th, 2021 (one month early) | . | Mathematics for Machine Learning: Linear Algebra (~18h course) Start on: Oct 27th, 2021 | Deadline on: Nov 27th, 2021 | Finished on: TBC | . | .",
            "url": "https://o-hatem.github.io/My-Journey-/2021/10/25/RoadMap.html",
            "relUrl": "/2021/10/25/RoadMap.html",
            "date": " • Oct 25, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "Mlquestions",
            "content": "ML-related Questions . ML-related Questions What is Cross Validation and what is it used for? Types of Cross Validation: | | | What is Cross Validation and what is it used for? . Cross Validation is a statstical way to predict the accuracy of a machine learning model. It helps reduce the change of overfitting to the data and selection bias. it’s used specially with small datasets where each data point may carry an important piece of information to help the machine learning model better predict. . Types of Cross Validation: . Classification has two main broad types: . non-Exhasutive Methods. non-Exhaustive method doesn’t compute all the ways of splitting data. . Holdout method. this method word by dividing the data into two sets, training and testing sets. Usually the percentage is 80:20 or 75:25 for training and testing respcetivly. . | K fold cross validation. it’s an improvment to the holdout method. it works by dividing the data into k folds, where training is performed on k-1 folds and testing is performed on 1 fold. then it chooses a different fold for testing while the rest for training, and so for till all folds are used as a testing fold once. Finally, it takes the average of all combination. . | Stratified K fold cross validation. There maybe a problem when using k fold CV when working on a classifcation problem. Where one fold can have a majority of a class resulting in selection bias for a particular fold. to prevent that stratified k CV is used to ensure that every fold consists balanced data between the class to avoid any bias in the data. . | | Exhaustive Methods. these are methods where is split the data into every possible combination of training and test sets. . Leave-P-out Method. it works by having p data points as the test set and (n-p) as the training set. where p will be every combination of the data points in the original dataset. The higher the p, the more combinations there are, the more processing power needed. . | Leave-one-out method. it is a variance of the Leave-p-out method where p is equal to 1. it is much less exhaustive where the number of combinations is euqal to n. . | | Rolling Cross validation. Rolling cross validation is used for time series datasets. It makes sure the golden rule of time series probelms (“look at the past to predict the future”) is not broken. it divides the data by a time frame and then train each split sequentially. e.g. . | Training set: [1], test set: [2] Training set: [1, 2], test set: [3] Training set: [1, 2, 3], test set: [4] . . Training set: [1, 2, 3, ..., n-1], test set: [n] .",
            "url": "https://o-hatem.github.io/My-Journey-/2021/10/25/MLQuestions.html",
            "relUrl": "/2021/10/25/MLQuestions.html",
            "date": " • Oct 25, 2021"
        }
        
    
  
    
        ,"post3": {
            "title": "Good Reading Articles",
            "content": "Good Reading Articles . Advice for Better Blog Posts By Rachel Thomas It’s a great article for begginers on how and why to start blogging. I liked how her words makes me feel encourged to do so. There are some great tips that i found very helpful. There are some points that i feel the need to keep in my mind all the time while blogging and i’ll do my best to do so. . | How to Learn Mathematics For Machine Learning? What Concepts do You Need to Master in Data Science? A really good article on all the math a data science or machine learning learner will need. It covers the required math branches you’ll need to study as well as the most important topics in each of them. And at the end, it got some good reccomendation for resources to learn the necessary math. . | .",
            "url": "https://o-hatem.github.io/My-Journey-/markdown/2021/10/25/GoodReading.html",
            "relUrl": "/markdown/2021/10/25/GoodReading.html",
            "date": " • Oct 25, 2021"
        }
        
    
  
    
        ,"post4": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://o-hatem.github.io/My-Journey-/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post5": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://o-hatem.github.io/My-Journey-/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://o-hatem.github.io/My-Journey-/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://o-hatem.github.io/My-Journey-/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}